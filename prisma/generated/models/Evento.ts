
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Evento` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Evento
 * 
 */
export type EventoModel = runtime.Types.Result.DefaultSelection<Prisma.$EventoPayload>

export type AggregateEvento = {
  _count: EventoCountAggregateOutputType | null
  _avg: EventoAvgAggregateOutputType | null
  _sum: EventoSumAggregateOutputType | null
  _min: EventoMinAggregateOutputType | null
  _max: EventoMaxAggregateOutputType | null
}

export type EventoAvgAggregateOutputType = {
  id: number | null
}

export type EventoSumAggregateOutputType = {
  id: number | null
}

export type EventoMinAggregateOutputType = {
  id: number | null
  titulo: string | null
  descricao: string | null
  data: Date | null
  criadoEm: Date | null
  processado: boolean | null
}

export type EventoMaxAggregateOutputType = {
  id: number | null
  titulo: string | null
  descricao: string | null
  data: Date | null
  criadoEm: Date | null
  processado: boolean | null
}

export type EventoCountAggregateOutputType = {
  id: number
  titulo: number
  descricao: number
  data: number
  criadoEm: number
  processado: number
  _all: number
}


export type EventoAvgAggregateInputType = {
  id?: true
}

export type EventoSumAggregateInputType = {
  id?: true
}

export type EventoMinAggregateInputType = {
  id?: true
  titulo?: true
  descricao?: true
  data?: true
  criadoEm?: true
  processado?: true
}

export type EventoMaxAggregateInputType = {
  id?: true
  titulo?: true
  descricao?: true
  data?: true
  criadoEm?: true
  processado?: true
}

export type EventoCountAggregateInputType = {
  id?: true
  titulo?: true
  descricao?: true
  data?: true
  criadoEm?: true
  processado?: true
  _all?: true
}

export type EventoAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Evento to aggregate.
   */
  where?: Prisma.EventoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Eventos to fetch.
   */
  orderBy?: Prisma.EventoOrderByWithRelationInput | Prisma.EventoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.EventoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Eventos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Eventos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Eventos
  **/
  _count?: true | EventoCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: EventoAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: EventoSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: EventoMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: EventoMaxAggregateInputType
}

export type GetEventoAggregateType<T extends EventoAggregateArgs> = {
      [P in keyof T & keyof AggregateEvento]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateEvento[P]>
    : Prisma.GetScalarType<T[P], AggregateEvento[P]>
}




export type EventoGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EventoWhereInput
  orderBy?: Prisma.EventoOrderByWithAggregationInput | Prisma.EventoOrderByWithAggregationInput[]
  by: Prisma.EventoScalarFieldEnum[] | Prisma.EventoScalarFieldEnum
  having?: Prisma.EventoScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: EventoCountAggregateInputType | true
  _avg?: EventoAvgAggregateInputType
  _sum?: EventoSumAggregateInputType
  _min?: EventoMinAggregateInputType
  _max?: EventoMaxAggregateInputType
}

export type EventoGroupByOutputType = {
  id: number
  titulo: string
  descricao: string
  data: Date
  criadoEm: Date
  processado: boolean
  _count: EventoCountAggregateOutputType | null
  _avg: EventoAvgAggregateOutputType | null
  _sum: EventoSumAggregateOutputType | null
  _min: EventoMinAggregateOutputType | null
  _max: EventoMaxAggregateOutputType | null
}

type GetEventoGroupByPayload<T extends EventoGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<EventoGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof EventoGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], EventoGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], EventoGroupByOutputType[P]>
      }
    >
  > 



export type EventoWhereInput = {
  AND?: Prisma.EventoWhereInput | Prisma.EventoWhereInput[]
  OR?: Prisma.EventoWhereInput[]
  NOT?: Prisma.EventoWhereInput | Prisma.EventoWhereInput[]
  id?: Prisma.IntFilter<"Evento"> | number
  titulo?: Prisma.StringFilter<"Evento"> | string
  descricao?: Prisma.StringFilter<"Evento"> | string
  data?: Prisma.DateTimeFilter<"Evento"> | Date | string
  criadoEm?: Prisma.DateTimeFilter<"Evento"> | Date | string
  processado?: Prisma.BoolFilter<"Evento"> | boolean
}

export type EventoOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  titulo?: Prisma.SortOrder
  descricao?: Prisma.SortOrder
  data?: Prisma.SortOrder
  criadoEm?: Prisma.SortOrder
  processado?: Prisma.SortOrder
  _relevance?: Prisma.EventoOrderByRelevanceInput
}

export type EventoWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.EventoWhereInput | Prisma.EventoWhereInput[]
  OR?: Prisma.EventoWhereInput[]
  NOT?: Prisma.EventoWhereInput | Prisma.EventoWhereInput[]
  titulo?: Prisma.StringFilter<"Evento"> | string
  descricao?: Prisma.StringFilter<"Evento"> | string
  data?: Prisma.DateTimeFilter<"Evento"> | Date | string
  criadoEm?: Prisma.DateTimeFilter<"Evento"> | Date | string
  processado?: Prisma.BoolFilter<"Evento"> | boolean
}, "id">

export type EventoOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  titulo?: Prisma.SortOrder
  descricao?: Prisma.SortOrder
  data?: Prisma.SortOrder
  criadoEm?: Prisma.SortOrder
  processado?: Prisma.SortOrder
  _count?: Prisma.EventoCountOrderByAggregateInput
  _avg?: Prisma.EventoAvgOrderByAggregateInput
  _max?: Prisma.EventoMaxOrderByAggregateInput
  _min?: Prisma.EventoMinOrderByAggregateInput
  _sum?: Prisma.EventoSumOrderByAggregateInput
}

export type EventoScalarWhereWithAggregatesInput = {
  AND?: Prisma.EventoScalarWhereWithAggregatesInput | Prisma.EventoScalarWhereWithAggregatesInput[]
  OR?: Prisma.EventoScalarWhereWithAggregatesInput[]
  NOT?: Prisma.EventoScalarWhereWithAggregatesInput | Prisma.EventoScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Evento"> | number
  titulo?: Prisma.StringWithAggregatesFilter<"Evento"> | string
  descricao?: Prisma.StringWithAggregatesFilter<"Evento"> | string
  data?: Prisma.DateTimeWithAggregatesFilter<"Evento"> | Date | string
  criadoEm?: Prisma.DateTimeWithAggregatesFilter<"Evento"> | Date | string
  processado?: Prisma.BoolWithAggregatesFilter<"Evento"> | boolean
}

export type EventoCreateInput = {
  titulo: string
  descricao: string
  data: Date | string
  criadoEm?: Date | string
  processado?: boolean
}

export type EventoUncheckedCreateInput = {
  id?: number
  titulo: string
  descricao: string
  data: Date | string
  criadoEm?: Date | string
  processado?: boolean
}

export type EventoUpdateInput = {
  titulo?: Prisma.StringFieldUpdateOperationsInput | string
  descricao?: Prisma.StringFieldUpdateOperationsInput | string
  data?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  criadoEm?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  processado?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type EventoUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  titulo?: Prisma.StringFieldUpdateOperationsInput | string
  descricao?: Prisma.StringFieldUpdateOperationsInput | string
  data?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  criadoEm?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  processado?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type EventoCreateManyInput = {
  id?: number
  titulo: string
  descricao: string
  data: Date | string
  criadoEm?: Date | string
  processado?: boolean
}

export type EventoUpdateManyMutationInput = {
  titulo?: Prisma.StringFieldUpdateOperationsInput | string
  descricao?: Prisma.StringFieldUpdateOperationsInput | string
  data?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  criadoEm?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  processado?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type EventoUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  titulo?: Prisma.StringFieldUpdateOperationsInput | string
  descricao?: Prisma.StringFieldUpdateOperationsInput | string
  data?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  criadoEm?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  processado?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type EventoOrderByRelevanceInput = {
  fields: Prisma.EventoOrderByRelevanceFieldEnum | Prisma.EventoOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type EventoCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  titulo?: Prisma.SortOrder
  descricao?: Prisma.SortOrder
  data?: Prisma.SortOrder
  criadoEm?: Prisma.SortOrder
  processado?: Prisma.SortOrder
}

export type EventoAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type EventoMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  titulo?: Prisma.SortOrder
  descricao?: Prisma.SortOrder
  data?: Prisma.SortOrder
  criadoEm?: Prisma.SortOrder
  processado?: Prisma.SortOrder
}

export type EventoMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  titulo?: Prisma.SortOrder
  descricao?: Prisma.SortOrder
  data?: Prisma.SortOrder
  criadoEm?: Prisma.SortOrder
  processado?: Prisma.SortOrder
}

export type EventoSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type BoolFieldUpdateOperationsInput = {
  set?: boolean
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type EventoSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  titulo?: boolean
  descricao?: boolean
  data?: boolean
  criadoEm?: boolean
  processado?: boolean
}, ExtArgs["result"]["evento"]>



export type EventoSelectScalar = {
  id?: boolean
  titulo?: boolean
  descricao?: boolean
  data?: boolean
  criadoEm?: boolean
  processado?: boolean
}

export type EventoOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "titulo" | "descricao" | "data" | "criadoEm" | "processado", ExtArgs["result"]["evento"]>

export type $EventoPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Evento"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    titulo: string
    descricao: string
    data: Date
    criadoEm: Date
    processado: boolean
  }, ExtArgs["result"]["evento"]>
  composites: {}
}

export type EventoGetPayload<S extends boolean | null | undefined | EventoDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$EventoPayload, S>

export type EventoCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<EventoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: EventoCountAggregateInputType | true
  }

export interface EventoDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Evento'], meta: { name: 'Evento' } }
  /**
   * Find zero or one Evento that matches the filter.
   * @param {EventoFindUniqueArgs} args - Arguments to find a Evento
   * @example
   * // Get one Evento
   * const evento = await prisma.evento.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends EventoFindUniqueArgs>(args: Prisma.SelectSubset<T, EventoFindUniqueArgs<ExtArgs>>): Prisma.Prisma__EventoClient<runtime.Types.Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Evento that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {EventoFindUniqueOrThrowArgs} args - Arguments to find a Evento
   * @example
   * // Get one Evento
   * const evento = await prisma.evento.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends EventoFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, EventoFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__EventoClient<runtime.Types.Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Evento that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventoFindFirstArgs} args - Arguments to find a Evento
   * @example
   * // Get one Evento
   * const evento = await prisma.evento.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends EventoFindFirstArgs>(args?: Prisma.SelectSubset<T, EventoFindFirstArgs<ExtArgs>>): Prisma.Prisma__EventoClient<runtime.Types.Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Evento that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventoFindFirstOrThrowArgs} args - Arguments to find a Evento
   * @example
   * // Get one Evento
   * const evento = await prisma.evento.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends EventoFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, EventoFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__EventoClient<runtime.Types.Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Eventos that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventoFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Eventos
   * const eventos = await prisma.evento.findMany()
   * 
   * // Get first 10 Eventos
   * const eventos = await prisma.evento.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const eventoWithIdOnly = await prisma.evento.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends EventoFindManyArgs>(args?: Prisma.SelectSubset<T, EventoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Evento.
   * @param {EventoCreateArgs} args - Arguments to create a Evento.
   * @example
   * // Create one Evento
   * const Evento = await prisma.evento.create({
   *   data: {
   *     // ... data to create a Evento
   *   }
   * })
   * 
   */
  create<T extends EventoCreateArgs>(args: Prisma.SelectSubset<T, EventoCreateArgs<ExtArgs>>): Prisma.Prisma__EventoClient<runtime.Types.Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Eventos.
   * @param {EventoCreateManyArgs} args - Arguments to create many Eventos.
   * @example
   * // Create many Eventos
   * const evento = await prisma.evento.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends EventoCreateManyArgs>(args?: Prisma.SelectSubset<T, EventoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Evento.
   * @param {EventoDeleteArgs} args - Arguments to delete one Evento.
   * @example
   * // Delete one Evento
   * const Evento = await prisma.evento.delete({
   *   where: {
   *     // ... filter to delete one Evento
   *   }
   * })
   * 
   */
  delete<T extends EventoDeleteArgs>(args: Prisma.SelectSubset<T, EventoDeleteArgs<ExtArgs>>): Prisma.Prisma__EventoClient<runtime.Types.Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Evento.
   * @param {EventoUpdateArgs} args - Arguments to update one Evento.
   * @example
   * // Update one Evento
   * const evento = await prisma.evento.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends EventoUpdateArgs>(args: Prisma.SelectSubset<T, EventoUpdateArgs<ExtArgs>>): Prisma.Prisma__EventoClient<runtime.Types.Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Eventos.
   * @param {EventoDeleteManyArgs} args - Arguments to filter Eventos to delete.
   * @example
   * // Delete a few Eventos
   * const { count } = await prisma.evento.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends EventoDeleteManyArgs>(args?: Prisma.SelectSubset<T, EventoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Eventos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventoUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Eventos
   * const evento = await prisma.evento.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends EventoUpdateManyArgs>(args: Prisma.SelectSubset<T, EventoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Evento.
   * @param {EventoUpsertArgs} args - Arguments to update or create a Evento.
   * @example
   * // Update or create a Evento
   * const evento = await prisma.evento.upsert({
   *   create: {
   *     // ... data to create a Evento
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Evento we want to update
   *   }
   * })
   */
  upsert<T extends EventoUpsertArgs>(args: Prisma.SelectSubset<T, EventoUpsertArgs<ExtArgs>>): Prisma.Prisma__EventoClient<runtime.Types.Result.GetResult<Prisma.$EventoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Eventos.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventoCountArgs} args - Arguments to filter Eventos to count.
   * @example
   * // Count the number of Eventos
   * const count = await prisma.evento.count({
   *   where: {
   *     // ... the filter for the Eventos we want to count
   *   }
   * })
  **/
  count<T extends EventoCountArgs>(
    args?: Prisma.Subset<T, EventoCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], EventoCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Evento.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends EventoAggregateArgs>(args: Prisma.Subset<T, EventoAggregateArgs>): Prisma.PrismaPromise<GetEventoAggregateType<T>>

  /**
   * Group by Evento.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {EventoGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends EventoGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: EventoGroupByArgs['orderBy'] }
      : { orderBy?: EventoGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, EventoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Evento model
 */
readonly fields: EventoFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Evento.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__EventoClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Evento model
 */
export interface EventoFieldRefs {
  readonly id: Prisma.FieldRef<"Evento", 'Int'>
  readonly titulo: Prisma.FieldRef<"Evento", 'String'>
  readonly descricao: Prisma.FieldRef<"Evento", 'String'>
  readonly data: Prisma.FieldRef<"Evento", 'DateTime'>
  readonly criadoEm: Prisma.FieldRef<"Evento", 'DateTime'>
  readonly processado: Prisma.FieldRef<"Evento", 'Boolean'>
}
    

// Custom InputTypes
/**
 * Evento findUnique
 */
export type EventoFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Evento
   */
  select?: Prisma.EventoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Evento
   */
  omit?: Prisma.EventoOmit<ExtArgs> | null
  /**
   * Filter, which Evento to fetch.
   */
  where: Prisma.EventoWhereUniqueInput
}

/**
 * Evento findUniqueOrThrow
 */
export type EventoFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Evento
   */
  select?: Prisma.EventoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Evento
   */
  omit?: Prisma.EventoOmit<ExtArgs> | null
  /**
   * Filter, which Evento to fetch.
   */
  where: Prisma.EventoWhereUniqueInput
}

/**
 * Evento findFirst
 */
export type EventoFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Evento
   */
  select?: Prisma.EventoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Evento
   */
  omit?: Prisma.EventoOmit<ExtArgs> | null
  /**
   * Filter, which Evento to fetch.
   */
  where?: Prisma.EventoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Eventos to fetch.
   */
  orderBy?: Prisma.EventoOrderByWithRelationInput | Prisma.EventoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Eventos.
   */
  cursor?: Prisma.EventoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Eventos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Eventos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Eventos.
   */
  distinct?: Prisma.EventoScalarFieldEnum | Prisma.EventoScalarFieldEnum[]
}

/**
 * Evento findFirstOrThrow
 */
export type EventoFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Evento
   */
  select?: Prisma.EventoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Evento
   */
  omit?: Prisma.EventoOmit<ExtArgs> | null
  /**
   * Filter, which Evento to fetch.
   */
  where?: Prisma.EventoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Eventos to fetch.
   */
  orderBy?: Prisma.EventoOrderByWithRelationInput | Prisma.EventoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Eventos.
   */
  cursor?: Prisma.EventoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Eventos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Eventos.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Eventos.
   */
  distinct?: Prisma.EventoScalarFieldEnum | Prisma.EventoScalarFieldEnum[]
}

/**
 * Evento findMany
 */
export type EventoFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Evento
   */
  select?: Prisma.EventoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Evento
   */
  omit?: Prisma.EventoOmit<ExtArgs> | null
  /**
   * Filter, which Eventos to fetch.
   */
  where?: Prisma.EventoWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Eventos to fetch.
   */
  orderBy?: Prisma.EventoOrderByWithRelationInput | Prisma.EventoOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Eventos.
   */
  cursor?: Prisma.EventoWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Eventos from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Eventos.
   */
  skip?: number
  distinct?: Prisma.EventoScalarFieldEnum | Prisma.EventoScalarFieldEnum[]
}

/**
 * Evento create
 */
export type EventoCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Evento
   */
  select?: Prisma.EventoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Evento
   */
  omit?: Prisma.EventoOmit<ExtArgs> | null
  /**
   * The data needed to create a Evento.
   */
  data: Prisma.XOR<Prisma.EventoCreateInput, Prisma.EventoUncheckedCreateInput>
}

/**
 * Evento createMany
 */
export type EventoCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Eventos.
   */
  data: Prisma.EventoCreateManyInput | Prisma.EventoCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Evento update
 */
export type EventoUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Evento
   */
  select?: Prisma.EventoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Evento
   */
  omit?: Prisma.EventoOmit<ExtArgs> | null
  /**
   * The data needed to update a Evento.
   */
  data: Prisma.XOR<Prisma.EventoUpdateInput, Prisma.EventoUncheckedUpdateInput>
  /**
   * Choose, which Evento to update.
   */
  where: Prisma.EventoWhereUniqueInput
}

/**
 * Evento updateMany
 */
export type EventoUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Eventos.
   */
  data: Prisma.XOR<Prisma.EventoUpdateManyMutationInput, Prisma.EventoUncheckedUpdateManyInput>
  /**
   * Filter which Eventos to update
   */
  where?: Prisma.EventoWhereInput
  /**
   * Limit how many Eventos to update.
   */
  limit?: number
}

/**
 * Evento upsert
 */
export type EventoUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Evento
   */
  select?: Prisma.EventoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Evento
   */
  omit?: Prisma.EventoOmit<ExtArgs> | null
  /**
   * The filter to search for the Evento to update in case it exists.
   */
  where: Prisma.EventoWhereUniqueInput
  /**
   * In case the Evento found by the `where` argument doesn't exist, create a new Evento with this data.
   */
  create: Prisma.XOR<Prisma.EventoCreateInput, Prisma.EventoUncheckedCreateInput>
  /**
   * In case the Evento was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.EventoUpdateInput, Prisma.EventoUncheckedUpdateInput>
}

/**
 * Evento delete
 */
export type EventoDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Evento
   */
  select?: Prisma.EventoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Evento
   */
  omit?: Prisma.EventoOmit<ExtArgs> | null
  /**
   * Filter which Evento to delete.
   */
  where: Prisma.EventoWhereUniqueInput
}

/**
 * Evento deleteMany
 */
export type EventoDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Eventos to delete
   */
  where?: Prisma.EventoWhereInput
  /**
   * Limit how many Eventos to delete.
   */
  limit?: number
}

/**
 * Evento without action
 */
export type EventoDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Evento
   */
  select?: Prisma.EventoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Evento
   */
  omit?: Prisma.EventoOmit<ExtArgs> | null
}
